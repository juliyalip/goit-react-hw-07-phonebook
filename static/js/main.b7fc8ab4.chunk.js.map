{"version":3,"sources":["component/form.module.css","redux/contact-action.js","redux/contact-operations.js","redux/contacts-selectors.js","component/Contacts.js","component/Filter.js","component/Form.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContatcReguest","createAction","fetchContactSuccess","fetchContactError","addContatcReguest","addContactSuccess","addContactError","deleteContactReguest","deleteContactSuccess","deleteContactError","changleFilter","axios","defaults","baseURL","getContacts","state","contacts","getFilter","filter","selectors","getLoading","loaging","getVisibleContact","createSelector","normalizedFilter","toLowerCase","name","includes","connect","persons","dispatch","onDelete","id","contactId","actions","delete","then","catch","error","TransitionGroup","component","map","number","CSSTransition","timeout","classNames","className","type","onClick","value","onChange","e","target","placeholder","Form","handleChange","currentTarget","setState","handleFormSubmit","preventDefault","onAdd","props","validateForm","shortid","generate","reset","some","contact","toast","alert","this","onSubmit","s","form","input","Component","newContact","post","data","contactOperetions","App","contactView","in","appear","unmountOnExit","length","isLoading","autoClose","position","a","get","contactsReduser","createReducer","_","payload","loadingReduser","filterReduser","combineReducers","loading","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","rootReduser","devTools","process","console","log","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7fc8ab4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__3QXq9\",\"input\":\"form_input__2kCfz\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContatcReguest = createAction('contact/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contact/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contact/fetchContactError');\r\n\r\n\r\nexport const addContatcReguest = createAction('contact/addContactRequest');\r\nexport const addContactSuccess = createAction('contact/addContactSuccess');\r\nexport const addContactError = createAction('contact/addContactError');\r\n\r\nexport const deleteContactReguest = createAction('contact/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contact/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contact/deleteContactError');\r\n\r\n\r\n\r\n\r\n// export const deleteContact = createAction('contact/delete')\r\n\r\nexport const changleFilter = createAction('contact/changeFilter')\r\n\r\n\r\n","import axios from 'axios';\r\nimport * as actions from './contact-action';\r\n\r\naxios.defaults.baseURL = ' http://localhost:4040';\r\n\r\n\r\n export const fetchContact = () => async dispatch => {\r\n     dispatch(actions.fetchContatcReguest());\r\n\r\n    try {\r\n       const { data } = await axios.get('/contacts');\r\n\r\n        dispatch(actions.fetchContactSuccess(data));\r\n\r\n          } catch (error) {\r\n        dispatch(actions.fetchContactError(error))\r\n          }\r\n\r\n}\r\n\r\n\r\nexport const addContact = ({ name, number} ) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };\r\n\r\n    dispatch(actions.addContatcReguest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n        .catch(error => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = contactId => dispatch => {\r\n    dispatch(actions.deleteContactReguest())\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)))\r\n\r\n}","import { createSelector} from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.loaging;\r\n\r\nconst getContacts = state => state.contacts;\r\n\r\nconst getFilter = state => state.filter;\r\n\r\n  \r\nconst getVisibleContact = createSelector(\r\n    [getContacts, getFilter],\r\n\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(({name}) =>  name.toLowerCase().includes(normalizedFilter) )\r\n})\r\n\r\nconst selectors = {\r\n    getLoading,\r\n    getContacts,\r\n    getFilter,\r\n    getVisibleContact\r\n}\r\n\r\nexport default selectors;","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as operation from '../redux/contact-operations'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport selectors from '../redux/contacts-selectors';\r\nimport  \"./contact.css\";\r\n\r\n\r\n\r\nconst Contacts = ({ persons, onDelete }) => (\r\n  <TransitionGroup component=\"ul\">\r\n     \r\n    {persons.map(({ id, name, number }) => (\r\n      <CSSTransition key={id} timeout={250} classNames=\"contactItem\">\r\n        \r\n       <li  className=\"contactItem\" id={id}>\r\n        <p>\r\n          {name} {number}\r\n        </p>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            onDelete(id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n        </li>\r\n        </CSSTransition>\r\n   \r\n    ))}\r\n\r\n </TransitionGroup>\r\n\r\n);\r\n\r\nContacts.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state =>( {\r\n    persons: selectors.getVisibleContact(state)})\r\n  \r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nonDelete: (id) => dispatch(operation.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Contacts);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/contact-action';\r\nimport selectors from '../redux/contacts-selectors'\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder=\"find name\"\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state =>( {\r\nvalue: selectors.getFilter(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onChange: e => dispatch(actions.changleFilter(e.target.value))\r\n\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as contactOperetions from '../redux/contact-operations'\r\nimport selectors from '../redux/contacts-selectors'\r\nimport s from \"./form.module.css\";\r\n\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n class Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    \r\n  };\r\n\r\n  static propTypes = {\r\n    handleChange: PropTypes.func,\r\n    handleFormSubmit: PropTypes.func,\r\n    validateForm: PropTypes.func,\r\n    reset: PropTypes.func,\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n   const isValedeForm = this.validateForm();\r\n   if (!isValedeForm) return;\r\n    onAdd({ id: shortid.generate(), name, number });\r\n    this.reset();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n       if (!name || !number) {\r\n      alert(\"filed is empti\");\r\n      return false;\r\n    }\r\n    const contacts = this.props.contacts;\r\n    if (contacts.some(contact => contact.name === name)) {\r\n  return toast.error(\"Контакт уже есть\")\r\n}\r\n    return true;\r\n  };\r\n\r\n     \r\n  reset = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n  \r\n    });\r\n   };\r\n   \r\n\r\n\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n \r\n\r\n    return (\r\n      <form onSubmit={this.handleFormSubmit} className={s.form}>\r\n        <label className={s.input}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            placeholder=\"enter name\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label className={s.input}>\r\n          Number\r\n          <input\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            placeholder=\"enter number\"\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: selectors.getContacts(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onAdd: (newContact) => dispatch(contactOperetions.addContact(newContact)),\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form)","import { Component } from \"react\";\nimport \"./index.css\";\nimport { connect } from 'react-redux';\nimport {fetchContact} from './redux/contact-operations'\nimport { CSSTransition } from 'react-transition-group';\n\nimport Contacts from \"./component/Contacts\";\nimport Filter from \"./component/Filter\";\nimport Form from \"./component/Form\";\n\nimport selectors from './redux/contacts-selectors'\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport './component/contact.css'\n\n\n\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.contactView()\n  }\n    \n render() {\n   const { contacts } = this.props\n   \n  return (\n       <>\n        <div className=\"container\">\n\n        \n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames=\"title\"\n          unmountOnExit\n        >\n          <h1 className=\"title\">Phonebook</h1>\n        </CSSTransition>\n        \n        \n          <Form />\n\n        <h2>Contacts</h2>\n        \n <CSSTransition in={contacts.length > 1}\n      timeout={250} unmountOnExit>\n          <Filter />\n        </CSSTransition>\n        \n        {this.props.isLoading && <h1>Загружаем ...</h1>}\n            \n          <CSSTransition in={contacts.length > 0}\n          appear={true} timeout={250} unmountOnExit\n          >\n         <Contacts />  \n                    \n            </CSSTransition>\n   \n     \n      \n          <ToastContainer autoClose={3000} position=\"top-left\"/> \n         \n        </div>\n      </>\n    )\n  }\n}\n\n\n \n\nconst mapStateToProps = state => ({\n  contacts: selectors.getContacts(state),\n  isLoading: selectors.getLoading(state)\n}\n);\n\n\nconst mapDispatchToProps = dispatch => ({\n  contactView: ()=> dispatch(fetchContact()) \n})\n  \n  \n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContatcReguest, addContactSuccess, addContactError,\r\n    deleteContactReguest, deleteContactSuccess,  deleteContactError,\r\n    changleFilter, fetchContatcReguest, fetchContactSuccess, fetchContactError\r\n} from './contact-action';\r\n\r\n\r\n\r\n\r\nconst contactsReduser = createReducer([], {\r\n    [fetchContactSuccess]: (_, {payload}) => payload,\r\n\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n\r\n    [deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) =>     id !== payload)\r\n}\r\n)\r\n\r\n\r\nconst loadingReduser = createReducer(false, {\r\n    [fetchContatcReguest]: () => false,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n   \r\n    [addContatcReguest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [deleteContactReguest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false\r\n})\r\n\r\n \r\nconst filterReduser = createReducer('', {\r\n    [changleFilter]: (_, {payload}) => payload\r\n})\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    contacts: contactsReduser, \r\n    filter: filterReduser,\r\n    loading: loadingReduser\r\n})","//import { persistStore, persistReducer } from 'redux-persist';\r\n//import storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\n\r\n\r\nimport rootReduser from './reducer';\r\n\r\n\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware(),\r\n  logger];\r\n\r\n\r\n\r\nconst store = configureStore({\r\n    reducer: rootReduser,\r\n    middleware,\r\ndevTools: process.env.NODE_ENV === 'development'}\r\n)\r\n\r\n\r\n\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store'\n\nimport {Provider} from 'react-redux'\n//import myStore from './redux/store';\n\nconsole.log(store.getState())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n  {/* <PersistGate loading={null} persistor={myStore.persistor}> */}\n        <App />\n       {/* </PersistGate>   */}\n   </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}